package lex

// Bit flag
// BITS: xxxx xxxx
//       ^^^^ ^^^^
//       |||| |||+---- [0]: is digit
//       |||| ||+----- [1]: is hex digit
//       |||| |+------ [2]: is lower
//       |||| +------- [3]: is upper
//       |||+--------- [4]: is punctuation
//       ||+---------- [5]: is space

const (
	flagDigit       = 0x01
	flagHexDigit    = 0x02
	flagLower       = 0x04
	flagUpper       = 0x08
	flagPunctuation = 0x10
	flagWhiteSpace  = 0x20
)

var byteFlagMap = [256]byte{
	// NUL  SOH   STX   ETX   EOT   ENQ   ACK   BEL
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x00 - 0x07
	// BS    HT    LF    VT    FF    CR    SO    SI
	0x00, 0x20, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, // 0x08 - 0x0F, '\t'(x09), '\n'(x0a), '\v'(x0b), '\f'(x0c), '\r'(x0d)
	// DLE  DC1   DC2   DC3   DC4   NAK   SYN   ETB
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x10 - 0x17
	// CAN   EM   SUB   ESC    FS    GS    RS    US
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x18 - 0x1F
	// SP     !     "     #     $     %     &     '
	0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 0x20 - 0x27
	//  (     )     *     +     ,     -     .     /
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 0x28 - 0x2F
	//  0     1     2     3     4     5     6     7
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, // 0x30 - 0x37
	//  8     9     :     ;     <     =     >     ?
	0x03, 0x03, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, // 0x40 - 0x47
	//  @     A     B     C     D     E     F     G
	0x10, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x08, // 0x48 - 0x4F
	//  H     I     J     K     L     M     N     O
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, // 0x50 - 0x57
	//  P     Q     R     S     T     U     V     W
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, // 0x58 - 0x5F
	//  X     Y     Z     [     \     ]     ^     _
	0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, // 0x60 - 0x67
	//  `     a     b     c     d     e     f     g
	0x10, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x04, // 0x68 - 0x6F
	//  h     i     j     k     l     m     n     o
	0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, // 0x70 - 0x77
	//  p     q     r     s     t     u     v     w
	0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, // 0x78 - 0x7F
	//  x     y     z     {     |     }     ~   DEL
	0x04, 0x04, 0x04, 0x10, 0x10, 0x10, 0x10, 0x00, // 0x80 - 0x87
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x88 - 0x8F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x90 - 0x97
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x98 - 0x9F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xA0 - 0xA7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xA8 - 0xAF
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB0 - 0xB7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB8 - 0xBF
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xC0 - 0xC7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xC8 - 0xCF
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD0 - 0xD7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD8 - 0xDF
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xE0 - 0xE7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xE8 - 0xEF
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF0 - 0xF7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF8 - 0xFF
}

func IsSpace(c byte) bool {
	return byteFlagMap[c]&flagWhiteSpace != 0
}

func IsDigit(c byte) bool {
	return byteFlagMap[c]&flagDigit != 0
}

func IsHexDigit(c byte) bool {
	return byteFlagMap[c]&flagHexDigit != 0
}

func IsLower(c byte) bool {
	return byteFlagMap[c]&flagLower != 0
}

func IsUpper(c byte) bool {
	return byteFlagMap[c]&flagUpper != 0
}

func IsPunct(c byte) bool {
	return byteFlagMap[c]&flagPunctuation != 0
}
